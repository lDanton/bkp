#a Possible file inclusion: @include "file"

[themes]

    [theme]
     # No name mean default
     name = "switzerland"

     font = "-*-cure-*-*-*-*-11-*-*-*-*-*-*-*"

     # Bars
     bars_width = 14
     bars_fg = "#777777"
     bars_bg = "#f9f9f9"

     # Element tags
     tags_normal_fg = "#f9f9f9"
     tags_normal_bg = "#f9f9f9"
     # tags_normal_statusline = ""

     tags_sel_fg = "#1c1c1c"
     tags_sel_bg = "#f9f9f9"
     # tags_sel_statusline = "\R[0;0;100;1;#c1c3dc]"

     tags_occupied_fg = "#a2a2a2"
     tags_occupied_bg = "#f9f9f9"
     # tags_occupied_statusline = "\R[0;0;100;1;#f494a3]"

     tags_urgent_fg = "#5d5d5d"
     tags_urgent_bg = "#3f3f3f"
     # tags_urgent_statusline = ""

     tags_border_color = "#f9f9f9"
     tags_border_width = 0

     # Frame / Client
     client_normal_fg = "#7f7f7f"
     client_normal_bg = "#7f7f7f"
     # client_normal_statusline = "\s[3;9;#121212;x] \s[2;8;#ff0000;x](1;client_close)"

     client_sel_fg = "#7f7f7f"
     client_sel_bg = "#7f7f7f"
     # client_sel_statusline = "\s[3;9;#121212;x] \s[2;8;#ff0000;x](1;client_close)"

     # client_free_statusline = ""

     frame_bg = "#7f7f7f"
     client_titlebar_width = 0
     client_border_width = 0

    [/theme]



[/themes]

[bars]

#  [systray]
#
#     active = true screen = 0 spacing = 2
#
#  [/systray

  [bar]
     name = "sonsky"
     position = 0
     screen = 0
     elements = "tls" # element order in bar
     theme = "switzerland"
  [/bar]

# [bar]
#    position = 0 screen = 1 elements = "ts" theme = "default" [/bar]

[/bars]

[tags]

  # Tag wrapping navigation
  circular = false

  # Use no screen option or screen = -1 to set tag on each screen

  [tag] name = ":::" [/tag] #browserbr
  [tag] name = ":::" [/tag]
  [tag] name = ":::" [/tag] #terms;te
  [tag] name = ":::" [/tag]
  [tag] name = ":::" [/tag] #work;wo
  [tag] name = ":::" [/tag]
  [tag] name = ":::" [/tag] #scrot;sc
  [tag] name = ":::" [/tag]
  [tag] name = ":::" [/tag] #a etc;ae
  [tag] name = ":::" [/tag]

 
  # Mousebinds associated to Tags element button
  [mouse] button = "1" func = "tag_click" [/mouse]
  [mouse] button = "4" func = "tag_next" [/mouse]
  [mouse] button = "5" func = "tag_prev" [/mouse]


[/tags]

[client]

  # Padding between clients (default: 0) 
 # padding = 5

  # Give focus to new created client (default = false)
  autofocus = true

  theme = "default"
  key_modifier = "Alt"

  # Focus type:
  #  enter : focus follow mouse (default) click : click to focus everything-else : disable mouse focus support
  focus = enter

  [mouse] button = "1" func = "client_focus_click" [/mouse]
  [mouse] button = "1" func = "mouse_swap" [/mouse]
  [mouse] button = "2" func = "mouse_tab" [/mouse]
  [mouse] button = "3" func = "mouse_resize" [/mouse]
  [mouse] button = "4" func = "client_focus_next_tab" [/mouse]
  [mouse] button = "5" func = "client_focus_prev_tab" [/mouse]

[/client]

[rules]

  [rule]
      # use instance = "*" for a all-clients rule
      instance = "*"

      # role = "" name = "" theme = "default"

      screen = 0

      free = true
      tab = false
      ignore_tag = false
  [/rule]

[/rules]

[launchers]

  # command can be an uicb function or an uicb function + extension (see example)
  [launcher]
     name = "exec"
     prompt = "run:"

     # Example of uicb + ext:
     #   command = "spawn xterm -e"
     command = "spawn"

     width = 300
  [/launcher]

[/launchers]

[keys]

  [key] mod = {"Alt"} key = "Return" func = "spawn" cmd = "urxvt -e tmux" [/key]
  [key] mod = {"Alt", "Shift"} key = "c" func = "client_close" [/key]
  [key] mod = {"Alt", "Shift"} key = "r" func = "reload" [/key]
  [key] mod = {"Alt"} key = "Up" func = "spawn" cmd = "amixer -q set Master 5%+ unmute" [/key]
  [key] mod = {"Alt"} key = "Down" func = "spawn" cmd = "amixer -q set Master 5%- unmute" [/key]
  [key] mod = {"Super"} key = "n" func = "spawn" cmd = "~/nightly/firefox" [/key]
  [key] mod = {"Alt"} key = "p" func = "spawn" cmd = "mpc toggle" [/key]
  [key] mod = {"Alt"} key = "Right" func = "spawn" cmd = "mpc next" [/key]
  [key] mod = {"Alt"} key = "Left" func = "spawn" cmd = "mpc prev" [/key]
  [key] mod = {"Alt"} key = "d" func = "spawn" cmd = "dmenu_path | dmenu_run -p 'run' -fn '-*-cure-*-*-*-*-11-*-*-*-*-*-*-*' -nf '#c3c3c3' -nb '#f9f9f9' -sf '#777777' -sb '#f9f9f9'" [/key]
  [key] mod = {"Alt"} key = "F1" func = "spawn" cmd = "~/scripts/stats/dzen_music.sh" [/key]
  [key] mod = {"Alt"} key = "F2" func = "spawn" cmd = "~/scripts/stats/dzen_bat.sh" [/key]
  [key] mod = {"Alt"} key = "F3" func = "spawn" cmd = "~/scripts/stats/dzen_date.sh" [/key]
  
  # Tag manipulation
  [key] mod = {"Alt"} key = "1" func = "tag_set" cmd = "0" [/key]
  [key] mod = {"Alt"} key = "2" func = "tag_set" cmd = "1" [/key]
  [key] mod = {"Alt"} key = "3" func = "tag_set" cmd = "2" [/key]
  [key] mod = {"Alt"} key = "4" func = "tag_set" cmd = "3" [/key]
  [key] mod = {"Alt"} key = "5" func = "tag_set" cmd = "4" [/key]
  [key] mod = {"Alt"} key = "6" func = "tag_set" cmd = "5" [/key]
  [key] mod = {"Alt"} key = "7" func = "tag_set" cmd = "6" [/key]
  [key] mod = {"Alt"} key = "8" func = "tag_set" cmd = "7" [/key]

  [key] mod = {"Alt", "Shift"} key = "1" func = "tag_client" cmd = "0" [/key]
  [key] mod = {"Alt", "Shift"} key = "2" func = "tag_client" cmd = "1" [/key]
  [key] mod = {"Alt", "Shift"} key = "3" func = "tag_client" cmd = "2" [/key]
  [key] mod = {"Alt", "Shift"} key = "4" func = "tag_client" cmd = "3" [/key]
  [key] mod = {"Alt", "Shift"} key = "5" func = "tag_client" cmd = "4" [/key]
  [key] mod = {"Alt", "Shift"} key = "6" func = "tag_client" cmd = "5" [/key]
  [key] mod = {"Alt", "Shift"} key = "7" func = "tag_client" cmd = "6" [/key]
  [key] mod = {"Alt", "Shift"} key = "8" func = "tag_client" cmd = "7" [/key]

  [key] mod = {"Super"} key = "minus" func = "tag_del" [/key]
  [key] mod = {"Super", "Shift"} key = "minus" func = "tag_new" [/key]

  # tag function: cmd = nameofthetag [key] mod = {"Super"} key = "z" func = "tag" cmd = "2" [/key]

  [key] mod = {"Super"} key = "Right" func = "tag_next" [/key]
  [key] mod = {"Super"} key = "Left" func = "tag_prev" [/key]

  [key] mod = {"Super"} key = "q" func = "client_close" [/key]

  # Focus next / prev client and next / prev tabbed client
  [key] mod = { "Alt", "Control" } key = "Right" func = "client_focus_next" [/key]
  [key] mod = { "Alt", "Control" } key = "Left" func = "client_focus_prev" [/key]

  # Focus next client with direction
#  [key] mod = {"Super", "Shift"} key = "Left" func = "client_focus_left" [/key] [key] mod = {"Super", "Shift"} key = "Right" func = "client_focus_right" [/key] [key] mod = {"Super", "Shift"} key = "Up" func = 
#  "client_focus_top" [/key] [key] mod = {"Super", "Shift"} key = "Down" func = "client_focus_bottom" [/key]

  # swap next client with direction:
  [key] mod = {"Control", "Shift"} key = "h" func = "client_swap_left" [/key]
  [key] mod = {"Control", "Shift"} key = "l" func = "client_swap_right" [/key]
  [key] mod = {"Control", "Shift"} key = "k" func = "client_swap_top" [/key]
  [key] mod = {"Control", "Shift"} key = "j" func = "client_swap_bottom" [/key]

  # Resize selected tiled client with direction
  [key] mod = {"Alt", "Control"} key = "h" func = "client_resize_left" cmd = "4" [/key]
  [key] mod = {"Alt", "Control"} key = "j" func = "client_resize_bottom" cmd = "4" [/key]
  [key] mod = {"Alt", "Control"} key = "k" func = "client_resize_top" cmd = "4" [/key]
  [key] mod = {"Alt", "Control"} key = "l" func = "client_resize_right" cmd = "4" [/key]
  [key] mod = {"Super", "Alt"} key = "l" func = "client_resize_right" cmd = "-4" [/key]
  [key] mod = {"Super", "Alt"} key = "h" func = "client_resize_left" cmd = "-4" [/key]
  [key] mod = {"Super", "Alt"} key = "j" func = "client_resize_bottom" cmd = "-4" [/key]
  [key] mod = {"Super", "Alt"} key = "k" func = "client_resize_top" cmd = "-4" [/key]

  # Tabbing command
#  [key] mod = {"Alt", "Shift"} key = "h" func = "client_tab_left" [/key] [key] mod = {"Alt", "Shift"} key = "l" func = "client_tab_right" [/key] [key] mod = {"Alt", "Shift"} key = "k" func = "client_tab_top" 
#  [/key] [key] mod = {"Alt", "Shift"} key = "j" func = "client_tab_bottom" [/key] [key] mod = {"Alt", "Shift"} key = "u" func = "client_untab" [/key] [key] mod = {"Super"} key = "t" func = 
#  "client_tab_next_opened" [/key]

  # Layout manipulation
  [key] mod = {"Super", "Alt"} key = "v" func = "layout_vmirror" [/key]
  [key] mod = {"Super", "Alt"} key = "h" func = "layout_hmirror" [/key]
  [key] mod = {"Super", "Alt"} key = "Right" func = "layout_rotate_right" [/key]
  [key] mod = {"Super", "Alt"} key = "Left" func = "layout_rotate_left" [/key]

  [key] mod = {"Control", "Super", "Alt"} key = "h" func = "layout_integrate_left" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "j" func = "layout_integrate_bottom" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "k" func = "layout_integrate_top" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "l" func = "layout_integrate_right" [/key]

  # Layout set historic travelling function (TESTING)
  [key] mod = {"Super"} key = "o" func = "layout_prev_set" [/key]
  [key] mod = {"Super", "Shift"} key = "o" func = "layout_next_set" [/key]

  # Toggle client free/tile
  [key] mod = {"Alt"} key = "t" func = "client_toggle_free" [/key]

  # Toggle client ignore_tag
  [key] mod = {"Super", "Shift"} key = "f" func = "client_toggle_ignore_tag" [/key]

  # Toggle infobar visibility
  [key] mod = {"Super", "Shift"} key = "h" func = "infobar_toggle_hide" [/key]

  # Launcher
#  [key] mod = {"Super"} key = "p" func = "launcher" cmd = "exec" [/key]

[/keys]
